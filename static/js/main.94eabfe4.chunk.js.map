{"version":3,"sources":["RtcSample.module.css","DescriptionComponent.tsx","RtcUtil.ts","RtcStartComponent.tsx","VideoComponent.tsx","TransmitterComponent.tsx","ReceiverComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","DescriptionComponent","props","className","styles","Description","makeNewConnection","setSdp","onTrack","pc","RTCPeerConnection","iceServers","onicecandidate","event","candidate","console","log","localDescription","sdp","ontrack","isCreateBtnEnabled","mode","state","undefined","ourSdp","isReceiveBtnEnabled","RtcStartComponent","thereSdp","RtcStartComponentContainer","Sdps","readOnly","placeholder","value","this","disabled","onClick","setState","onStart","createOffer","then","desc","setLocalDescription","onChange","e","target","setRemoteDescription","RTCSessionDescription","type","catch","err","error","createAnswer","sessionDescription","React","Component","VideoComponent","video","update","stream","srcObject","autoPlay","onLoadedMetadata","play","ref","TransmitterComponent","getUserMedia","navigator","bind","audio","width","height","handleVideo","name","videoTracks","getVideoTracks","audioTracks","getAudioTracks","length","label","getTracks","forEach","track","addTrack","ReceiverComponent","streams","App","modeSelector","newMode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.94eabfe4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"RtcStartComponentContainer\":\"RtcSample_RtcStartComponentContainer__1oqsr\",\"Sdps\":\"RtcSample_Sdps__1VPlM\",\"Description\":\"RtcSample_Description__1osy3\"};","import React from \"react\";\nimport { Mode } from \"./App\";\nimport styles from \"./RtcSample.module.css\";\n\ntype Props = {\n  mode: Mode;\n};\n\nconst DescriptionComponent: React.FC<Props> = (props: Props) => {\n  return (\n    <div className={styles.Description}>\n      <h2>How to start</h2>\n      <ol>\n        <li>\n          [Transmitter] Click create button to create Transmitter SDP(Our SDP).\n        </li>\n        <li>\n          [Transmitter] Copy Transmitter SDP and sending it to Receiver via\n          email,slack etc.\n        </li>\n        <li>\n          [Receiver] Receive Transmitter SDP, and paste it to There SDP textarea\n          and click receive button.\n        </li>\n        <li>\n          [Receiver] Copy Receiver SDP(Our SDP) and sending it to Transmitter\n          via email, slack etc.\n        </li>\n        <li>\n          [Transmitter] Receive Receiver SDP, and paste it to There SDP textarea\n          and click receive button.\n        </li>\n        <li>Tha's all. You can see their video.</li>\n      </ol>\n    </div>\n  );\n};\n\nexport default DescriptionComponent;\n","export const makeNewConnection = (\n  setSdp: (sdp: string) => void,\n  onTrack?: (event: RTCTrackEvent) => void\n) => {\n  const pc = new RTCPeerConnection({ iceServers: [] });\n  pc.onicecandidate = (event) => {\n    if (event.candidate) {\n      console.log(\"onicecandidate\", event.candidate);\n    } else {\n      // empty ice event. it means that we can complete SDP.\n      console.log(\"empty ice event\");\n      setSdp(pc.localDescription!.sdp);\n    }\n  };\n  if (onTrack) {\n    pc.ontrack = onTrack;\n  }\n\n  return pc;\n};\n","import React from \"react\";\nimport { makeNewConnection } from \"./RtcUtil\";\nimport styles from \"./RtcSample.module.css\";\nimport { Mode } from \"./App\";\n\ntype Props = {\n  mode: Mode;\n  onStart?: (pc: RTCPeerConnection) => void;\n  onTrack?: (event: RTCTrackEvent) => void;\n};\n\ntype State = {\n  ourSdp: string | undefined;\n  thereSdp: string | undefined;\n  pc: RTCPeerConnection | null;\n};\n\nconst isCreateBtnEnabled = (mode: Mode, state: State) => {\n  switch (mode) {\n    case \"Transmitter\":\n      return state.ourSdp === undefined && state.pc !== undefined;\n    case \"Receiver\":\n      return false;\n  }\n};\n\nconst isReceiveBtnEnabled = (mode: Mode, state: State) => {\n  switch (mode) {\n    case \"Transmitter\":\n      return state.ourSdp !== undefined && state.pc !== undefined;\n    case \"Receiver\":\n      return state.pc !== undefined;\n  }\n};\n\nclass RtcStartComponent extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      ourSdp: undefined,\n      thereSdp: undefined,\n      pc: null,\n    };\n  }\n\n  render() {\n    return (\n      <div className={styles.RtcStartComponentContainer}>\n        <div className={styles.Sdps}>\n          <div>\n            <p>Our SDP</p>\n            <div>\n              <textarea\n                readOnly={true}\n                placeholder=\"Out SDP (click button below to create)\"\n                value={this.state.ourSdp}\n              />\n            </div>\n            <button\n              disabled={!isCreateBtnEnabled(this.props.mode, this.state)}\n              onClick={() => {\n                const pc = makeNewConnection((sdp) => {\n                  this.setState({ ourSdp: sdp });\n                });\n                if (this.props.onStart) {\n                  this.props.onStart(pc);\n                }\n                pc.createOffer().then((desc) => {\n                  console.log(desc);\n                  pc.setLocalDescription(desc);\n                });\n                this.setState({\n                  pc: pc,\n                });\n              }}\n            >\n              create\n            </button>\n          </div>\n          <div>\n            <div>\n              <p>Their SDP</p>\n              <textarea\n                placeholder=\"There SDP(click button below to receive)\"\n                onChange={(e) => {\n                  this.setState({ thereSdp: e.target.value });\n                }}\n              />\n            </div>\n            <button\n              disabled={!isReceiveBtnEnabled(this.props.mode, this.state)}\n              onClick={() => {\n                if (this.state.pc) {\n                  this.state.pc\n                    .setRemoteDescription(\n                      new RTCSessionDescription({\n                        type: \"answer\",\n                        sdp: this.state.thereSdp,\n                      })\n                    )\n                    .then(function () {\n                      console.log(\n                        \"setRemoteDescription(answer) succsess in promise\"\n                      );\n                    })\n                    .catch(function (err) {\n                      console.error(\n                        \"setRemoteDescription(answer) ERROR: \",\n                        err\n                      );\n                    });\n                } else {\n                  const pc = makeNewConnection((sdp) => {\n                    this.setState({ ourSdp: sdp });\n                  }, this.props.onTrack);\n                  pc.setRemoteDescription(\n                    new RTCSessionDescription({\n                      type: \"offer\",\n                      sdp: this.state.thereSdp!,\n                    })\n                  )\n                    .then(function () {\n                      console.log(\n                        \"setRemoteDescription(answer) succsess in promise\"\n                      );\n                    })\n                    .catch(function (err) {\n                      console.error(\n                        \"setRemoteDescription(answer) ERROR: \",\n                        err\n                      );\n                    });\n                  pc.createAnswer()\n                    .then((sessionDescription) => {\n                      console.log(\n                        \"createAnswer() succsess in promise\",\n                        sessionDescription\n                      );\n                      return pc.setLocalDescription(sessionDescription);\n                    })\n                    .then(function () {\n                      console.log(\"setLocalDescription() succsess in promise\");\n                    })\n                    .catch(function (err) {\n                      console.error(err);\n                    });\n                  this.setState({ pc: pc });\n                }\n              }}\n            >\n              receive\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RtcStartComponent;\n","import React from \"react\";\n\nexport class VideoComponent extends React.Component<{\n  stream: any;\n}> {\n  private video: HTMLVideoElement | null = null;\n  componentDidMount() {\n    this.update();\n  }\n  componentDidUpdate() {\n    this.update();\n  }\n\n  update() {\n    console.log(\"update\");\n    if (this.video && this.props.stream) {\n      this.video.srcObject = this.props.stream;\n    }\n  }\n\n  render() {\n    return (\n      <video\n        autoPlay={true}\n        onLoadedMetadata={(e) => {\n          console.log(e);\n          (e.target as HTMLMediaElement).play();\n        }}\n        ref={(e) => {\n          this.video = e;\n        }}\n      ></video>\n    );\n  }\n}\n\nexport default VideoComponent;\n","import React from \"react\";\nimport DescriptionComponent from \"./DescriptionComponent\";\nimport RtcStartComponent from \"./RtcStartComponent\";\nimport VideoComponent from \"./VideoComponent\";\n\nclass TransmitterComponent extends React.Component<\n  {},\n  { stream: MediaStream | null; sdp: string | undefined }\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      stream: null,\n      sdp: undefined,\n    };\n  }\n  componentDidMount() {\n    const getUserMedia = navigator.getUserMedia.bind(navigator);\n\n    if (getUserMedia) {\n      getUserMedia(\n        { audio: false, video: { width: 1280, height: 720 } },\n        this.handleVideo.bind(this),\n        function (err) {\n          console.log(\"The following error occurred: \" + err.name);\n        }\n      );\n    } else {\n      console.log(\"getUserMedia not supported\");\n    }\n  }\n\n  handleVideo(stream: MediaStream) {\n    this.setState({ stream: stream });\n\n    const videoTracks = stream.getVideoTracks();\n    const audioTracks = stream.getAudioTracks();\n\n    if (videoTracks.length > 0) {\n      console.log(`Using video device: ${videoTracks[0].label}`);\n    }\n    if (audioTracks.length > 0) {\n      console.log(`Using audio device: ${audioTracks[0].label}`);\n    }\n  }\n  render() {\n    return (\n      <>\n        <DescriptionComponent mode=\"Transmitter\" />\n        <RtcStartComponent\n          mode={\"Transmitter\"}\n          onStart={(pc) => {\n            console.log(\"send start\");\n            // pc.addStream();\n            this.state.stream!.getTracks().forEach((track) => {\n              console.log(\"add track\", track, this.state.stream);\n              pc.addTrack(track, this.state.stream!);\n            });\n          }}\n        />\n        <VideoComponent stream={this.state.stream} />\n      </>\n    );\n  }\n}\n\nexport default TransmitterComponent;\n","import React from \"react\";\nimport DescriptionComponent from \"./DescriptionComponent\";\nimport RtcStartComponent from \"./RtcStartComponent\";\nimport VideoComponent from \"./VideoComponent\";\n\nclass ReceiverComponent extends React.Component<\n  {},\n  { sdp: string | null; stream: MediaStream | null }\n> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      sdp: null,\n      stream: null,\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <DescriptionComponent mode=\"Receiver\" />\n        <RtcStartComponent\n          mode=\"Receiver\"\n          onTrack={(event) => {\n            console.log(\"onTrack\", event);\n            this.setState({\n              stream: event.streams[0],\n            });\n          }}\n        />\n        <div>\n          <VideoComponent stream={this.state.stream} />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ReceiverComponent;\n","import React from \"react\";\nimport logo, { ReactComponent } from \"./logo.svg\";\nimport \"./App.css\";\nimport TransmitterComponent from \"./TransmitterComponent\";\nimport ReceiverComponent from \"./ReceiverComponent\";\nimport \"./another-stylesheet.css\";\n\nexport type Mode = \"Transmitter\" | \"Receiver\" | null;\n\nclass App extends React.Component<{}, { mode: Mode }> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      mode: null,\n    };\n  }\n\n  modeSelector = (\n    <div>\n      <select\n        onChange={(e) => {\n          const newMode = e.target.value;\n          if (newMode === \"Transmitter\" || newMode === \"Receiver\") {\n            this.setState({\n              mode: newMode as Mode,\n            });\n          } else {\n            this.setState({\n              mode: null,\n            });\n          }\n        }}\n      >\n        <option value=\"Null\">Mode Select</option>\n        <option value=\"Transmitter\">Transmitter</option>\n        <option value=\"Receiver\">Receiver</option>\n      </select>\n    </div>\n  );\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>WebRTC Sample Project using React.js (Mode:{this.state.mode})</h1>\n\n        {this.state.mode === \"Transmitter\" ? (\n          <TransmitterComponent />\n        ) : this.state.mode === \"Receiver\" ? (\n          <ReceiverComponent />\n        ) : (\n          this.modeSelector\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}